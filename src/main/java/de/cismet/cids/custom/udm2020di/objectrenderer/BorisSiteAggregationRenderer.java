/***************************************************
*
* cismet GmbH, Saarbruecken, Germany
*
*              ... and it just works.
*
****************************************************/
package de.cismet.cids.custom.udm2020di.objectrenderer;

import org.apache.log4j.Logger;

import org.openide.util.WeakListeners;

import java.awt.Component;
import java.awt.EventQueue;

import java.util.ArrayList;
import java.util.Collection;
import java.util.TreeSet;

import javax.swing.DefaultListCellRenderer;
import javax.swing.DefaultListModel;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import javax.swing.table.DefaultTableModel;

import de.cismet.cids.custom.udm2020di.actions.remote.BorisExportAction;
import de.cismet.cids.custom.udm2020di.indeximport.OracleImport;
import de.cismet.cids.custom.udm2020di.types.AggregationValue;
import de.cismet.cids.custom.udm2020di.types.AggregationValues;
import de.cismet.cids.custom.udm2020di.types.Parameter;
import de.cismet.cids.custom.udm2020di.types.boris.Probenparameter;
import de.cismet.cids.custom.udm2020di.types.boris.Standort;

import de.cismet.cids.dynamics.CidsBean;

import de.cismet.cids.tools.metaobjectrenderer.CidsBeanAggregationRendererPanel;

import static de.cismet.cids.custom.udm2020di.objectrenderer.EprtrInstallationRenderer.SELECTED_TAB;

/**
 * DOCUMENT ME!
 *
 * @author   pd
 * @version  $Revision$, $Date$
 */
public class BorisSiteAggregationRenderer extends CidsBeanAggregationRendererPanel {

    //~ Static fields/initializers ---------------------------------------------

    protected static final Logger LOGGER = Logger.getLogger(BorisSiteAggregationRenderer.class);
    protected static int SELECTED_TAB = 0;

    //~ Instance fields --------------------------------------------------------

    private transient Collection<CidsBean> cidsBeans;

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel exportPanel;
    private javax.swing.JPanel featureSelectionPanel;
    private javax.swing.JList featuresList;
    private javax.swing.Box.Filler filler1;
    private javax.swing.Box.Filler filler2;
    private javax.swing.JPanel infoPanel;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTabbedPane jTabbedPane;
    private de.cismet.cids.custom.udm2020di.widgets.MapPanel mapPanel;
    private javax.swing.JPanel messwertePanel;
    private javax.swing.JTable messwerteTable;
    private de.cismet.cids.custom.udm2020di.widgets.ParameterPanel parameterPanel;
    private de.cismet.cids.custom.udm2020di.widgets.ParameterSelectionPanel parameterSelectionPanel;
    private de.cismet.cids.custom.udm2020di.search.CustomMaxValuesSearchPanel searchPanel;
    // End of variables declaration//GEN-END:variables

    //~ Constructors -----------------------------------------------------------

    /**
     * Creates new form BorisSiteRenderer.
     */
    public BorisSiteAggregationRenderer() {
        initComponents();
    }

    //~ Methods ----------------------------------------------------------------

    /**
     * Get the value of cidsBeans.
     *
     * @return  the value of cidsBeans
     */
    @Override
    public Collection<CidsBean> getCidsBeans() {
        return cidsBeans;
    }

    /**
     * Set the value of cidsBeans.
     *
     * @param  cidsBeans  new value of cidsBeans
     */
    @Override
    public void setCidsBeans(final Collection<CidsBean> cidsBeans) {
        this.cidsBeans = cidsBeans;
        this.init();
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The
     * content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        parameterPanel = new de.cismet.cids.custom.udm2020di.widgets.ParameterPanel();
        jTabbedPane = new javax.swing.JTabbedPane();
        infoPanel = new javax.swing.JPanel();
        mapPanel = new de.cismet.cids.custom.udm2020di.widgets.MapPanel();
        featureSelectionPanel = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        featuresList = new javax.swing.JList();
        messwertePanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        messwerteTable = new javax.swing.JTable();
        filler1 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0),
                new java.awt.Dimension(0, 0),
                new java.awt.Dimension(32767, 32767));
        exportPanel = new javax.swing.JPanel();
        parameterSelectionPanel = new de.cismet.cids.custom.udm2020di.widgets.ParameterSelectionPanel();
        filler2 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0),
                new java.awt.Dimension(0, 0),
                new java.awt.Dimension(32767, 32767));
        searchPanel = new de.cismet.cids.custom.udm2020di.search.CustomMaxValuesSearchPanel();

        parameterPanel.setMinimumSize(new java.awt.Dimension(200, 300));

        setLayout(new java.awt.BorderLayout());

        jTabbedPane.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        infoPanel.setLayout(new java.awt.GridBagLayout());

        mapPanel.setBorder(javax.swing.BorderFactory.createCompoundBorder(
                javax.swing.BorderFactory.createEmptyBorder(5, 5, 5, 5),
                javax.swing.BorderFactory.createCompoundBorder(
                    javax.swing.BorderFactory.createTitledBorder(
                        org.openide.util.NbBundle.getMessage(
                            BorisSiteAggregationRenderer.class,
                            "BorisSiteAggregationRenderer.mapPanel.border.insideBorder.outsideBorder.title")),
                    javax.swing.BorderFactory.createEmptyBorder(5, 5, 5, 5)))); // NOI18N
        mapPanel.setMinimumSize(new java.awt.Dimension(300, 500));
        mapPanel.setPreferredSize(new java.awt.Dimension(300, 500));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.8;
        gridBagConstraints.weighty = 1.0;
        infoPanel.add(mapPanel, gridBagConstraints);

        featureSelectionPanel.setBorder(javax.swing.BorderFactory.createCompoundBorder(
                javax.swing.BorderFactory.createEmptyBorder(5, 5, 5, 5),
                javax.swing.BorderFactory.createCompoundBorder(
                    javax.swing.BorderFactory.createTitledBorder(
                        org.openide.util.NbBundle.getMessage(
                            BorisSiteAggregationRenderer.class,
                            "BorisSiteAggregationRenderer.featureSelectionPanel.border.insideBorder.outsideBorder.title")),
                    javax.swing.BorderFactory.createEmptyBorder(5, 5, 5, 5)))); // NOI18N
        featureSelectionPanel.setMinimumSize(new java.awt.Dimension(300, 300));
        featureSelectionPanel.setLayout(new java.awt.GridLayout(1, 0));

        featuresList.setModel(new javax.swing.AbstractListModel() {

                String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };

                @Override
                public int getSize() {
                    return strings.length;
                }
                @Override
                public Object getElementAt(final int i) {
                    return strings[i];
                }
            });
        featuresList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        featuresList.setCellRenderer(new NameRenderer());
        featuresList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {

                @Override
                public void valueChanged(final javax.swing.event.ListSelectionEvent evt) {
                    featuresListValueChanged(evt);
                }
            });
        jScrollPane2.setViewportView(featuresList);

        featureSelectionPanel.add(jScrollPane2);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.2;
        gridBagConstraints.weighty = 1.0;
        infoPanel.add(featureSelectionPanel, gridBagConstraints);

        jTabbedPane.addTab(org.openide.util.NbBundle.getMessage(
                BorisSiteAggregationRenderer.class,
                "BorisSiteAggregationRenderer.infoPanel.TabConstraints.tabTitle_1"),
            infoPanel); // NOI18N

        messwertePanel.setBorder(javax.swing.BorderFactory.createEmptyBorder(5, 5, 5, 5));
        messwertePanel.setLayout(new java.awt.GridBagLayout());

        messwerteTable.setBorder(javax.swing.BorderFactory.createLineBorder(
                javax.swing.UIManager.getDefaults().getColor("Table.dropLineColor")));
        messwerteTable.setModel(new javax.swing.table.DefaultTableModel(
                new Object[][] {},
                new String[] { "Parametername", "Max. Maximalwert", "Min. Maximalwert" }) {

                Class[] types = new Class[] { java.lang.String.class, java.lang.Float.class, java.lang.Float.class };
                boolean[] canEdit = new boolean[] { false, false, false };

                @Override
                public Class getColumnClass(final int columnIndex) {
                    return types[columnIndex];
                }

                @Override
                public boolean isCellEditable(final int rowIndex, final int columnIndex) {
                    return canEdit[columnIndex];
                }
            });
        messwerteTable.setFillsViewportHeight(true);
        messwerteTable.setPreferredSize(new java.awt.Dimension(300, 500));
        messwerteTable.setRequestFocusEnabled(false);
        messwerteTable.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(messwerteTable);
        if (messwerteTable.getColumnModel().getColumnCount() > 0) {
            messwerteTable.getColumnModel()
                    .getColumn(0)
                    .setHeaderValue(org.openide.util.NbBundle.getMessage(
                            BorisSiteAggregationRenderer.class,
                            "BorisSiteAggregationRenderer.messwerteTable.columnModel.title0")); // NOI18N
            messwerteTable.getColumnModel()
                    .getColumn(1)
                    .setHeaderValue(org.openide.util.NbBundle.getMessage(
                            BorisSiteAggregationRenderer.class,
                            "BorisSiteAggregationRenderer.messwerteTable.columnModel.title2")); // NOI18N
            messwerteTable.getColumnModel()
                    .getColumn(2)
                    .setHeaderValue(org.openide.util.NbBundle.getMessage(
                            BorisSiteAggregationRenderer.class,
                            "BorisSiteAggregationRenderer.messwerteTable.columnModel.title3")); // NOI18N
        }

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        messwertePanel.add(jScrollPane1, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        messwertePanel.add(filler1, gridBagConstraints);

        jTabbedPane.addTab(org.openide.util.NbBundle.getMessage(
                BorisSiteAggregationRenderer.class,
                "BorisSiteAggregationRenderer.messwertePanel.TabConstraints.tabTitle_2"),
            messwertePanel); // NOI18N

        exportPanel.setLayout(new java.awt.GridBagLayout());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        exportPanel.add(parameterSelectionPanel, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        exportPanel.add(filler2, gridBagConstraints);

        jTabbedPane.addTab(org.openide.util.NbBundle.getMessage(
                BorisSiteAggregationRenderer.class,
                "BorisSiteAggregationRenderer.exportPanel.TabConstraints.tabTitle_1_1"),
            exportPanel); // NOI18N
        jTabbedPane.addTab(org.openide.util.NbBundle.getMessage(
                BorisSiteAggregationRenderer.class,
                "BorisSiteAggregationRenderer.searchPanel.TabConstraints.tabTitle"),
            searchPanel); // NOI18N

        add(jTabbedPane, java.awt.BorderLayout.CENTER);
    } // </editor-fold>//GEN-END:initComponents

    /**
     * DOCUMENT ME!
     *
     * @param  evt  DOCUMENT ME!
     */
    private void featuresListValueChanged(final javax.swing.event.ListSelectionEvent evt) { //GEN-FIRST:event_featuresListValueChanged
        if (!evt.getValueIsAdjusting()) {
            this.mapPanel.gotoCidsBean((CidsBean)this.featuresList.getSelectedValue());
        }
    }                                                                                       //GEN-LAST:event_featuresListValueChanged

    /**
     * DOCUMENT ME!
     */
    protected void init() {
        if ((cidsBeans != null) && !cidsBeans.isEmpty()) {
            LOGGER.info("processing " + cidsBeans.size() + "cids beans");
            final Runnable r = new Runnable() {

                    @Override
                    public void run() {
                        mapPanel.setCidsBeans(cidsBeans);

                        // final TreeSet<String> parameterNamesSet = new TreeSet<String>();
                        final TreeSet<Parameter> parametersSet = new TreeSet<Parameter>();
                        final TreeSet<String> standortPks = new TreeSet<String>();
                        final DefaultListModel listModel = new DefaultListModel();
                        final AggregationValues aggregationValues = new AggregationValues();

                        for (final CidsBean cidsBean : cidsBeans) {
                            listModel.addElement(cidsBean);

                            try {
                                final Standort borisStandort = OracleImport.JSON_MAPPER.readValue(
                                        cidsBean.getProperty("src_content").toString(),
                                        Standort.class);

                                final ArrayList<String> parameterNames = new ArrayList<String>(
                                        borisStandort.getProbenparameter().size());
                                for (final Probenparameter probenparameter : borisStandort.getProbenparameter()) {
                                    parameterNames.add(probenparameter.getParameterName());
                                }

                                standortPks.add(borisStandort.getPk());
                                // parameterNamesSet.addAll(parameterNames);
                                parametersSet.addAll(borisStandort.getProbenparameter());

                                // boris samples values are already aggregated.
                                // Set the maximum values of the aggregated maximum values and
                                // the minimum values of the aggregated maximum values
                                aggregationValues.addAllMax(borisStandort.getAggregationValues());
                            } catch (Exception ex) {
                                LOGGER.error("could not deserialize boris Standort JSON: " + ex.getMessage(), ex);
                            }
                        }

                        featuresList.setModel(listModel);
                        // parameterPanel.setParameterNames(parameterNamesSet);

                        // Export Tab
                        parameterSelectionPanel.setParameters(parametersSet);

                        final BorisExportAction borisExportAction = new BorisExportAction(
                                standortPks,
                                parameterSelectionPanel.getSelectedParameters());
                        parameterSelectionPanel.setExportAction(borisExportAction);

                        // Messwerte Tab -------------------------------
                        final DefaultTableModel tableModel = (DefaultTableModel)messwerteTable.getModel();
                        for (final AggregationValue aggregationValue : aggregationValues) {
                            final Object[] rowData = new Object[] {
                                    aggregationValue.getName(),
                                    aggregationValue.getMaxValue(),
                                    aggregationValue.getMinValue()
                                };
                            tableModel.addRow(rowData);
                        }

                        // temp search
                        searchPanel.setCollections(cidsBeans, aggregationValues);

                        jTabbedPane.setSelectedIndex(SELECTED_TAB);

                        jTabbedPane.addChangeListener(WeakListeners.create(
                                ChangeListener.class,
                                new ChangeListener() {

                                    @Override
                                    public void stateChanged(final ChangeEvent evt) {
                                        SELECTED_TAB = jTabbedPane.getSelectedIndex();
                                    }
                                },
                                jTabbedPane));
                    }
                };

            if (EventQueue.isDispatchThread()) {
                r.run();
            } else {
                EventQueue.invokeLater(r);
            }
        }
    }

    @Override
    public void dispose() {
        // mappingComponent.dispose();
    }

    @Override
    public String getTitle() {
        String desc = "";
        final Collection<CidsBean> beans = cidsBeans;
        if ((beans != null) && (beans.size() > 0)) {
            desc += beans.size() + " Boris Standorte ausgewählt";
        }
        return desc;
    }

    @Override
    public void setTitle(final String title) {
    }

    //~ Inner Classes ----------------------------------------------------------

    /**
     * DOCUMENT ME!
     *
     * @version  $Revision$, $Date$
     */
    public static final class NameRenderer extends DefaultListCellRenderer {

        //~ Methods ------------------------------------------------------------

        @Override
        public Component getListCellRendererComponent(final JList list,
                final Object value,
                final int index,
                final boolean isSelected,
                final boolean cellHasFocus) {
            final Component comp = super.getListCellRendererComponent(list, value, index, isSelected, cellHasFocus);

            if ((comp instanceof JLabel) && (value instanceof CidsBean)) {
                final JLabel label = (JLabel)comp;
                final CidsBean obj = (CidsBean)value;
                final String name = (String)obj.getProperty("name"); // NOI18N
                label.setText(name);
            }

            return comp;
        }
    }
}
