/***************************************************
*
* cismet GmbH, Saarbruecken, Germany
*
*              ... and it just works.
*
****************************************************/
package de.cismet.cids.custom.udm2020di.search;

import Sirius.navigator.connection.SessionManager;
import Sirius.navigator.plugin.PluginRegistry;
import Sirius.navigator.search.dynamic.SearchControlPanel;
import Sirius.navigator.search.dynamic.SearchProgressDialog;
import Sirius.navigator.types.treenode.DefaultMetaTreeNode;
import Sirius.navigator.types.treenode.ObjectTreeNode;
import Sirius.navigator.ui.ComponentRegistry;
import Sirius.navigator.ui.RightStickyToolbarItem;
import Sirius.navigator.ui.status.DefaultStatusChangeSupport;

import Sirius.server.middleware.types.MetaClass;
import Sirius.server.middleware.types.MetaObjectNode;

import org.apache.log4j.Logger;

import org.jdesktop.swingx.JXErrorPane;
import org.jdesktop.swingx.error.ErrorInfo;

import org.openide.util.Lookup;
import org.openide.util.lookup.ServiceProvider;

import java.awt.EventQueue;

import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;
import java.util.concurrent.CancellationException;
import java.util.logging.Level;

import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.SwingWorker;

import de.cismet.cids.navigator.utils.CidsClientToolbarItem;
import de.cismet.cids.navigator.utils.ClassCacheMultiple;
import de.cismet.cids.navigator.utils.MetaTreeNodeVisualization;

import de.cismet.cids.server.search.builtin.FullTextSearch;

import de.cismet.tools.gui.StaticSwingTools;

/**
 * DOCUMENT ME!
 *
 * @author   jruiz
 * @version  $Revision$, $Date$
 */
@ServiceProvider(service = CidsClientToolbarItem.class)
public class GazetteerToolbarItem extends javax.swing.JPanel implements CidsClientToolbarItem, RightStickyToolbarItem {

    //~ Static fields/initializers ---------------------------------------------

    public static final ImageIcon ICON_SEARCH = new ImageIcon(GazetteerToolbarItem.class.getResource(
                "/de/cismet/cismap/navigatorplugin/metasearch/search_geom.png"));

    protected static final Logger LOGGER = Logger.getLogger(GazetteerToolbarItem.class);
    public static final String GAZETTEER_CLASS = "GWK";
    public static final String DOMAIN = "UDM2020-DI";

    //~ Instance fields --------------------------------------------------------

    protected final DefaultStatusChangeSupport statusChangeSupport = new DefaultStatusChangeSupport(new Object());
    protected final SearchProgressDialog searchProgressDialog;

    protected MetaClass metaClass;

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private de.cismet.tools.gui.JSearchTextField jSearchTextField;
    // End of variables declaration//GEN-END:variables

    //~ Constructors -----------------------------------------------------------

    /**
     * Creates new form FulltextSearchToolbarItem.
     */
    public GazetteerToolbarItem() {
        initComponents();
        jSearchTextField.setSearchIcon(ICON_SEARCH);

        metaClass = ClassCacheMultiple.getMetaClass(DOMAIN, GAZETTEER_CLASS);
        if (metaClass == null) {
            LOGGER.warn("could not retrieve " + GAZETTEER_CLASS + " class from " + DOMAIN + ", "
                        + "filter is disabled!");
            this.jSearchTextField.setEnabled(false);
        }

        searchProgressDialog = new SearchProgressDialog(StaticSwingTools.getFirstParentFrame(
                    ComponentRegistry.getRegistry().getDescriptionPane()),
                statusChangeSupport);
    }

    //~ Methods ----------------------------------------------------------------

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The
     * content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        final java.awt.GridBagConstraints gridBagConstraints;

        jSearchTextField = new de.cismet.tools.gui.JSearchTextField();

        setMaximumSize(new java.awt.Dimension(200, 31));
        setMinimumSize(new java.awt.Dimension(200, 27));
        setPreferredSize(new java.awt.Dimension(200, 27));
        setLayout(new java.awt.GridBagLayout());

        jSearchTextField.setText(org.openide.util.NbBundle.getMessage(
                GazetteerToolbarItem.class,
                "GazetteerToolbarItem.jSearchTextField.text"));                                            // NOI18N
        jSearchTextField.setToolTipText(org.openide.util.NbBundle.getMessage(
                GazetteerToolbarItem.class,
                "GazetteerToolbarItem.jSearchTextField.toolTipText"));                                     // NOI18N
        jSearchTextField.setAbortIcon(new javax.swing.ImageIcon(
                getClass().getResource("/de/cismet/cismap/navigatorplugin/metasearch/search_abort.png"))); // NOI18N
        jSearchTextField.setEmptyText(org.openide.util.NbBundle.getMessage(
                GazetteerToolbarItem.class,
                "GazetteerToolbarItem.jSearchTextField.emptyText"));                                       // NOI18N
        jSearchTextField.setSearchIcon(new javax.swing.ImageIcon(
                getClass().getResource("/de/cismet/cismap/navigatorplugin/metasearch/search.png")));       // NOI18N
        jSearchTextField.addActionListener(new java.awt.event.ActionListener() {

                @Override
                public void actionPerformed(final java.awt.event.ActionEvent evt) {
                    jSearchTextFieldActionPerformed(evt);
                }
            });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        add(jSearchTextField, gridBagConstraints);
    } // </editor-fold>//GEN-END:initComponents

    /**
     * DOCUMENT ME!
     *
     * @param  evt  DOCUMENT ME!
     */
    private void jSearchTextFieldActionPerformed(final java.awt.event.ActionEvent evt) { //GEN-FIRST:event_jSearchTextFieldActionPerformed
        final String searchText = jSearchTextField.getText();

        if (jSearchTextField.isEnabled() && (searchText != null) && !searchText.trim().isEmpty()) {
            // default search is always present
            final FullTextSearch fullTextSearch = Lookup.getDefault().lookup(FullTextSearch.class);
            fullTextSearch.setSearchText(jSearchTextField.getText());
            fullTextSearch.setCaseSensitive(false);
            fullTextSearch.setValidClassesFromStrings(Arrays.asList(
                    new String[] { this.metaClass.getKey().toString() }));

            final SwingWorker<List<DefaultMetaTreeNode>, Void> searchWorker =
                new SwingWorker<List<DefaultMetaTreeNode>, Void>() {

                    PropertyChangeListener cancelListener = null;

                    @Override
                    protected List<DefaultMetaTreeNode> doInBackground() throws Exception {
                        LOGGER.info("performing GazetteerFulltextSearch for '" + jSearchTextField.getText() + "'");
                        final ArrayList<DefaultMetaTreeNode> objectTreeNodes = new ArrayList<DefaultMetaTreeNode>();

                        Thread.currentThread().setName("GazetteerFulltextSearch");
                        EventQueue.invokeLater(new Runnable() {

                                @Override
                                public void run() {
                                    cancelListener = new PropertyChangeListener() {

                                            @Override
                                            public void propertyChange(final PropertyChangeEvent evt) {
                                                LOGGER.warn("search worker cancelled");
                                                cancel(true);
                                            }
                                        };

                                    statusChangeSupport.addPropertyChangeListener(cancelListener);
                                    searchProgressDialog.pack();
                                    searchProgressDialog.setLabelAnimation(true);
                                    StaticSwingTools.showDialog(searchProgressDialog);
                                }
                            });

                        final Collection resultCollection = SessionManager.getProxy()
                                    .customServerSearch(SessionManager.getSession().getUser(), fullTextSearch);

                        if (!isCancelled() && !resultCollection.isEmpty()) {
                            LOGGER.info(resultCollection.size() + " results found by GazetteerFulltextSearch for '"
                                        + jSearchTextField.getText() + "'");

                            for (final Object node : resultCollection) {
                                if (node instanceof MetaObjectNode) {
                                    final ObjectTreeNode objectTreeNode = new ObjectTreeNode((MetaObjectNode)node);
                                    objectTreeNode.getMetaObject(true);
                                    objectTreeNodes.add(objectTreeNode);
                                }
                            }
                        } else {
                            LOGGER.warn("no results for GazetteerFulltextSearch for '" + jSearchTextField.getText()
                                        + "' found!");
                        }

                        return objectTreeNodes;
                    }

                    @Override
                    protected void done() {
                        searchProgressDialog.dispose();

                        try {
                            if (!isCancelled()) {
                                final List<DefaultMetaTreeNode> objectTreeNodes = this.get();
                                if (LOGGER.isDebugEnabled()) {
                                    LOGGER.debug("visualising " + objectTreeNodes + " object tree nodes");
                                }

                                if (!objectTreeNodes.isEmpty()) {
                                    PluginRegistry.getRegistry()
                                            .getPluginDescriptor("cismap")
                                            .getUIDescriptor("cismap")
                                            .getView()
                                            .makeVisible();
                                    MetaTreeNodeVisualization.getInstance().addVisualization(objectTreeNodes);
                                } else {
                                    JOptionPane.showMessageDialog(
                                        PluginRegistry.getRegistry().getPluginDescriptor("cismap").getUIDescriptor(
                                            "cismap").getView(),
                                        org.openide.util.NbBundle.getMessage(
                                            GazetteerToolbarItem.this.getClass(),
                                            "GazetteerToolbarItem.emptyresult.message"), // NOI18N
                                        org.openide.util.NbBundle.getMessage(
                                            GazetteerToolbarItem.this.getClass(),
                                            "GazetteerToolbarItem.emptyresult.title"), // NOI18N
                                        JOptionPane.INFORMATION_MESSAGE);
                                }
                            } else {
                                LOGGER.warn("search cancelled");
                            }
                        } catch (InterruptedException ex) {
                            LOGGER.warn(ex.getMessage(), ex);
                        } catch (CancellationException ex) {
                            LOGGER.warn(ex.getMessage(), ex);
                        } catch (Exception ex) {
                            LOGGER.error(ex.getMessage(), ex);
                            final ErrorInfo errorInfo = new ErrorInfo(
                                    org.openide.util.NbBundle.getMessage(
                                        SearchControlPanel.class,
                                        "SearchControlPanel.propertyChange(PropertyChangeEvent).JOptionPane_anon.title"),
                                    org.openide.util.NbBundle.getMessage(
                                        SearchControlPanel.class,
                                        "SearchControlPanel.propertyChange(PropertyChangeEvent).JOptionPane_anon.message"),
                                    null,
                                    "ERROR",
                                    ex.getCause(),
                                    Level.WARNING,
                                    null);

                            JXErrorPane.showDialog(getRootPane(), errorInfo);
                        } finally {
                            this.removePropertyChangeListener(cancelListener);
                            searchProgressDialog.dispose();
                        }
                    }
                };

            searchWorker.execute();
        }
    } //GEN-LAST:event_jSearchTextFieldActionPerformed

    @Override
    public String getSorterString() {
        return "ZZZ";
    }

    @Override
    public boolean isVisible() {
        return this.jSearchTextField.isEnabled();
    }
}
