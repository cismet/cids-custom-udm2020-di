/***************************************************
*
* cismet GmbH, Saarbruecken, Germany
*
*              ... and it just works.
*
****************************************************/
package de.cismet.cids.custom.udm2020di.widgets;

import org.apache.log4j.Logger;

import org.jdesktop.beansbinding.AutoBinding;
import org.jdesktop.beansbinding.BeanProperty;
import org.jdesktop.beansbinding.Binding;
import org.jdesktop.beansbinding.Bindings;
import org.jdesktop.beansbinding.ELProperty;

import org.openide.util.WeakListeners;

import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;

import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import java.util.SortedSet;
import java.util.TreeSet;

import javax.swing.JCheckBox;
import javax.swing.SwingWorker;

import de.cismet.cids.custom.udm2020di.actions.remote.ExportAction;
import de.cismet.cids.custom.udm2020di.actions.remote.VisualisationAction;
import de.cismet.cids.custom.udm2020di.types.Parameter;

/**
 * DOCUMENT ME!
 *
 * @author   Pascal Dih√©
 * @version  $Revision$, $Date$
 */
public class VisualisationParameterSelectionPanel extends javax.swing.JPanel implements ItemListener {

    //~ Static fields/initializers ---------------------------------------------

    protected static final Logger LOGGER = Logger.getLogger(VisualisationParameterSelectionPanel.class);

    //~ Instance fields --------------------------------------------------------

    protected transient org.jdesktop.beansbinding.BindingGroup bindingGroup;

    protected final transient SortedSet<Parameter> parameters = new TreeSet<Parameter>();

    protected final transient ArrayList selectedParameters = new ArrayList();

    protected boolean disableEvents = false;

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel actionPanel;
    private javax.swing.JButton btnReset;
    private javax.swing.JButton btnSelectAll;
    private javax.swing.JButton btnVisualise;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.Box.Filler filler1;
    private javax.swing.Box.Filler filler2;
    private javax.swing.Box.Filler filler5;
    private javax.swing.JPanel selectionPanel;
    // End of variables declaration//GEN-END:variables

    //~ Constructors -----------------------------------------------------------

    /**
     * Creates new form ParameterSelectionPanel.
     */
    public VisualisationParameterSelectionPanel() {
        bindingGroup = new org.jdesktop.beansbinding.BindingGroup();
        initComponents();
    }

    /**
     * Creates a new VisualisationParameterSelectionPanel object.
     *
     * @param  narrowLayout  DOCUMENT ME!
     */
    public VisualisationParameterSelectionPanel(final boolean narrowLayout) {
        this();

        if (narrowLayout) {
            this.selectionPanel.setLayout(new java.awt.GridLayout(0, 2, 5, 5));
        }
    }

    /**
     * Creates a new ParameterSelectionPanel object.
     *
     * @param  parameters  DOCUMENT ME!
     */
    public VisualisationParameterSelectionPanel(final Collection<Parameter> parameters) {
        this();
        this.setParameters(parameters);
    }

    //~ Methods ----------------------------------------------------------------

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The
     * content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        buttonGroup1 = new javax.swing.ButtonGroup();
        selectionPanel = new javax.swing.JPanel();
        actionPanel = new javax.swing.JPanel();
        btnVisualise = new javax.swing.JButton();
        filler2 = new javax.swing.Box.Filler(new java.awt.Dimension(5, 5),
                new java.awt.Dimension(5, 5),
                new java.awt.Dimension(5, 5));
        btnReset = new javax.swing.JButton();
        filler5 = new javax.swing.Box.Filler(new java.awt.Dimension(5, 5),
                new java.awt.Dimension(5, 5),
                new java.awt.Dimension(5, 5));
        btnSelectAll = new javax.swing.JButton();
        filler1 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0),
                new java.awt.Dimension(0, 0),
                new java.awt.Dimension(32767, 0));

        setBorder(javax.swing.BorderFactory.createCompoundBorder(
                javax.swing.BorderFactory.createEmptyBorder(5, 5, 5, 5),
                javax.swing.BorderFactory.createCompoundBorder(
                    javax.swing.BorderFactory.createTitledBorder(
                        org.openide.util.NbBundle.getMessage(
                            VisualisationParameterSelectionPanel.class,
                            "VisualisationParameterSelectionPanel.border.insideBorder.outsideBorder.title")),
                    javax.swing.BorderFactory.createEmptyBorder(5, 5, 5, 5)))); // NOI18N
        setMinimumSize(new java.awt.Dimension(500, 100));
        setLayout(new java.awt.BorderLayout(5, 5));

        selectionPanel.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 5, 0));
        selectionPanel.setLayout(new java.awt.GridLayout(0, 3, 5, 5));
        add(selectionPanel, java.awt.BorderLayout.CENTER);

        actionPanel.setLayout(new javax.swing.BoxLayout(actionPanel, javax.swing.BoxLayout.LINE_AXIS));

        btnVisualise.setText(org.openide.util.NbBundle.getMessage(
                VisualisationParameterSelectionPanel.class,
                "VisualisationParameterSelectionPanel.btnVisualise.text"));          // NOI18N
        btnVisualise.setActionCommand(org.openide.util.NbBundle.getMessage(
                VisualisationParameterSelectionPanel.class,
                "VisualisationParameterSelectionPanel.btnVisualise.actionCommand")); // NOI18N
        actionPanel.add(btnVisualise);
        actionPanel.add(filler2);

        btnReset.setText(org.openide.util.NbBundle.getMessage(
                VisualisationParameterSelectionPanel.class,
                "VisualisationParameterSelectionPanel.btnReset.text"));          // NOI18N
        btnReset.setActionCommand(org.openide.util.NbBundle.getMessage(
                VisualisationParameterSelectionPanel.class,
                "VisualisationParameterSelectionPanel.btnReset.actionCommand")); // NOI18N
        btnReset.addActionListener(new java.awt.event.ActionListener() {

                @Override
                public void actionPerformed(final java.awt.event.ActionEvent evt) {
                    btnResetActionPerformed(evt);
                }
            });
        actionPanel.add(btnReset);
        actionPanel.add(filler5);

        btnSelectAll.setText(org.openide.util.NbBundle.getMessage(
                VisualisationParameterSelectionPanel.class,
                "VisualisationParameterSelectionPanel.btnSelectAll.text"));          // NOI18N
        btnSelectAll.setActionCommand(org.openide.util.NbBundle.getMessage(
                VisualisationParameterSelectionPanel.class,
                "VisualisationParameterSelectionPanel.btnSelectAll.actionCommand")); // NOI18N
        btnSelectAll.addActionListener(new java.awt.event.ActionListener() {

                @Override
                public void actionPerformed(final java.awt.event.ActionEvent evt) {
                    btnSelectAllActionPerformed(evt);
                }
            });
        actionPanel.add(btnSelectAll);
        actionPanel.add(filler1);

        add(actionPanel, java.awt.BorderLayout.SOUTH);
    } // </editor-fold>//GEN-END:initComponents

    /**
     * DOCUMENT ME!
     *
     * @param  evt  DOCUMENT ME!
     */
    private void btnResetActionPerformed(final java.awt.event.ActionEvent evt) { //GEN-FIRST:event_btnResetActionPerformed
        this.disableEvents = true;
        if ((this.parameters != null) && !this.parameters.isEmpty()) {
            for (final Parameter parameter : this.parameters) {
                parameter.setSelected(false);
            }
        }
        this.disableEvents = false;
        this.enableButtons();
    }                                                                            //GEN-LAST:event_btnResetActionPerformed

    /**
     * DOCUMENT ME!
     *
     * @param  evt  DOCUMENT ME!
     */
    private void btnSelectAllActionPerformed(final java.awt.event.ActionEvent evt) { //GEN-FIRST:event_btnSelectAllActionPerformed
        this.disableEvents = true;
        for (final Parameter parameter : this.parameters) {
            parameter.setSelected(true);
        }
        this.disableEvents = false;
        this.enableButtons();
    }                                                                                //GEN-LAST:event_btnSelectAllActionPerformed

    /**
     * Get the value of parameters.
     *
     * @return  the value of parameters
     */
    public final Collection<Parameter> getParameters() {
        return parameters;
    }

    /**
     * Set the value of parameters.
     *
     * @param  parameters  new value of parameters
     */
    public final void setParameters(final Collection<Parameter> parameters) {
        LOGGER.info("setting " + parameters.size() + " parameters");
        this.parameters.addAll(parameters);
        VisualisationParameterSelectionPanel.this.selectionPanel.removeAll();

        if (!VisualisationParameterSelectionPanel.this.parameters.isEmpty()) {
            final SwingWorker checkBoxWorker = new SwingWorker<Void, JCheckBox>() {

                    @Override
                    protected Void doInBackground() throws Exception {
                        bindingGroup.unbind();
                        for (final Parameter parameter : VisualisationParameterSelectionPanel.this.parameters) {
                            final JCheckBox checkBox = new JCheckBox(parameter.getParameterName());
                            checkBox.addItemListener(WeakListeners.create(
                                    ItemListener.class,
                                    VisualisationParameterSelectionPanel.this,
                                    checkBox));

                            final Binding binding = Bindings.createAutoBinding(
                                    AutoBinding.UpdateStrategy.READ_WRITE,
                                    parameter,
                                    ELProperty.create("${selected}"),
                                    checkBox,
                                    BeanProperty.create("selected"));
                            bindingGroup.addBinding(binding);

                            publish(checkBox);
                        }
                        bindingGroup.bind();
                        return null;
                    }

                    @Override
                    protected void process(final List<JCheckBox> chunks) {
                        for (final JCheckBox checkBox : chunks) {
                            VisualisationParameterSelectionPanel.this.selectionPanel.add(checkBox);
                        }
                    }

                    @Override
                    protected void done() {
                        VisualisationParameterSelectionPanel.this.selectionPanel.validate();
                        VisualisationParameterSelectionPanel.this.selectionPanel.repaint();
                    }
                };
            checkBoxWorker.execute();
        } else {
            LOGGER.warn("no parameters provided!");
        }
    }

    /**
     * DOCUMENT ME!
     *
     * @return  DOCUMENT ME!
     */
    public final Collection<Parameter> getSelectedParameters() {
        selectedParameters.clear();
        if ((this.parameters != null) && !this.parameters.isEmpty()) {
            for (final Parameter parameter : this.parameters) {
                if (parameter.isSelected()) {
                    selectedParameters.add(parameter);
                }
            }
        }

        return selectedParameters;
    }

    /**
     * DOCUMENT ME!
     *
     * @param  visualisationAction  exportAction DOCUMENT ME!
     */
    public void setVisualisationActionAction(final VisualisationAction visualisationAction) {
        btnVisualise.setAction(visualisationAction);
    }

    /**
     * Get the value of exportAction.
     *
     * @return  the value of exportAction
     */
    public ExportAction getExportAction() {
        return
            ((btnVisualise.getAction() != null)
                        && ExportAction.class.isAssignableFrom(btnVisualise.getAction().getClass()))
            ? (ExportAction)btnVisualise.getAction() : null;
    }

    @Override
    public void itemStateChanged(final ItemEvent e) {
        if (!this.disableEvents) {
            enableButtons();
        }
    }

    /**
     * DOCUMENT ME!
     */
    protected void enableButtons() {
        final Collection<Parameter> selParameters = this.getSelectedParameters();

        if (selParameters.isEmpty()) {
            this.btnVisualise.setEnabled(false);
            this.btnReset.setEnabled(false);
        } else {
            this.btnVisualise.setEnabled(true);
            this.btnReset.setEnabled(true);
        }

        if (selParameters.size() == this.parameters.size()) {
            this.btnSelectAll.setEnabled(false);
        } else {
            this.btnSelectAll.setEnabled(true);
        }
    }
}
