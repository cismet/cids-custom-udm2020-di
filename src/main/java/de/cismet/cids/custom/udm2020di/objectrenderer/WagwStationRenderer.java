/***************************************************
*
* cismet GmbH, Saarbruecken, Germany
*
*              ... and it just works.
*
****************************************************/
package de.cismet.cids.custom.udm2020di.objectrenderer;

import org.apache.log4j.BasicConfigurator;
import org.apache.log4j.Logger;

import org.openide.util.WeakListeners;

import java.awt.Dimension;
import java.awt.EventQueue;
import java.awt.GridBagConstraints;

import java.io.IOException;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;

import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;

import de.cismet.cids.custom.udm2020di.AbstractCidsBeanRenderer;
import de.cismet.cids.custom.udm2020di.actions.remote.WaExportAction;
import de.cismet.cids.custom.udm2020di.actions.remote.WaVisualisationAction;
import de.cismet.cids.custom.udm2020di.indeximport.OracleImport;
import de.cismet.cids.custom.udm2020di.types.AggregationValue;
import de.cismet.cids.custom.udm2020di.types.Parameter;
import de.cismet.cids.custom.udm2020di.types.wa.GwMessstelle;
import de.cismet.cids.custom.udm2020di.types.wa.Messstelle;
import de.cismet.cids.custom.udm2020di.widgets.MaxParameterValueSelectionPanel;

/**
 * DOCUMENT ME!
 *
 * @author   pd
 * @version  $Revision$, $Date$
 */
public class WagwStationRenderer extends AbstractCidsBeanRenderer implements ConfigurableRenderer {

    //~ Static fields/initializers ---------------------------------------------

    protected static int SELECTED_TAB = 0;

    //~ Instance fields --------------------------------------------------------

    protected Logger logger = Logger.getLogger(WagwStationRenderer.class);
    protected String stationType = WaExportAction.WAGW;

    private Messstelle messstelle;

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel exportPanel;
    private javax.swing.Box.Filler filler2;
    private javax.swing.JPanel infoPanel;
    private javax.swing.JTabbedPane jTabbedPane;
    private de.cismet.cids.custom.udm2020di.widgets.MesswerteTable messwerteTable;
    private de.cismet.cids.custom.udm2020di.widgets.ParameterPanel parameterPanel;
    private javax.swing.JScrollPane parameterScrollPane;
    private de.cismet.cids.custom.udm2020di.widgets.ExportParameterSelectionPanel parameterSelectionPanel;
    protected javax.swing.JPanel standortdatenPanel;
    private de.cismet.cids.custom.udm2020di.widgets.VisualisationPanel visualisationPanel;
    // End of variables declaration//GEN-END:variables

    //~ Constructors -----------------------------------------------------------

    /**
     * Creates new form BorisSiteRenderer.
     */
    public WagwStationRenderer() {
        initComponents();
    }

    //~ Methods ----------------------------------------------------------------

    /**
     * DOCUMENT ME!
     *
     * @return  DOCUMENT ME!
     */
    public Messstelle getMessstelle() {
        return messstelle;
    }

    /**
     * DOCUMENT ME!
     *
     * @param  messstelle  DOCUMENT ME!
     */
    public void setMessstelle(final Messstelle messstelle) {
        this.messstelle = messstelle;
    }
    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The
     * content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jTabbedPane = new javax.swing.JTabbedPane();
        infoPanel = new javax.swing.JPanel();
        standortdatenPanel = new javax.swing.JPanel();
        parameterScrollPane = new javax.swing.JScrollPane();
        parameterPanel = new de.cismet.cids.custom.udm2020di.widgets.ParameterPanel();
        messwerteTable = new de.cismet.cids.custom.udm2020di.widgets.MesswerteTable();
        exportPanel = new javax.swing.JPanel();
        parameterSelectionPanel = new de.cismet.cids.custom.udm2020di.widgets.ExportParameterSelectionPanel();
        filler2 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0),
                new java.awt.Dimension(0, 0),
                new java.awt.Dimension(32767, 32767));
        visualisationPanel = new de.cismet.cids.custom.udm2020di.widgets.VisualisationPanel();

        setLayout(new java.awt.BorderLayout());

        jTabbedPane.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        infoPanel.setLayout(new java.awt.BorderLayout());

        standortdatenPanel.setBorder(javax.swing.BorderFactory.createCompoundBorder(
                javax.swing.BorderFactory.createEmptyBorder(5, 5, 5, 5),
                javax.swing.BorderFactory.createCompoundBorder(
                    javax.swing.BorderFactory.createTitledBorder(
                        org.openide.util.NbBundle.getMessage(
                            WagwStationRenderer.class,
                            "WagwStationRenderer.standortdatenPanel.border.insideBorder.outsideBorder.title")),
                    javax.swing.BorderFactory.createEmptyBorder(5, 5, 5, 5)))); // NOI18N
        standortdatenPanel.setLayout(new java.awt.GridBagLayout());
        infoPanel.add(standortdatenPanel, java.awt.BorderLayout.CENTER);

        parameterScrollPane.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        parameterScrollPane.setHorizontalScrollBar(null);
        parameterScrollPane.setMaximumSize(new java.awt.Dimension(250, 32767));
        parameterScrollPane.setMinimumSize(new java.awt.Dimension(250, 300));
        parameterScrollPane.setPreferredSize(new java.awt.Dimension(250, 500));
        parameterScrollPane.setViewportView(parameterPanel);

        infoPanel.add(parameterScrollPane, java.awt.BorderLayout.EAST);

        jTabbedPane.addTab(org.openide.util.NbBundle.getMessage(
                WagwStationRenderer.class,
                "WagwStationRenderer.infoPanel.TabConstraints.tabTitle"),
            infoPanel);      // NOI18N
        jTabbedPane.addTab(org.openide.util.NbBundle.getMessage(
                WagwStationRenderer.class,
                "WagwStationRenderer.messwerteTable.TabConstraints.tabTitle"),
            messwerteTable); // NOI18N

        exportPanel.setLayout(new java.awt.GridBagLayout());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        exportPanel.add(parameterSelectionPanel, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        exportPanel.add(filler2, gridBagConstraints);

        jTabbedPane.addTab(org.openide.util.NbBundle.getMessage(
                WagwStationRenderer.class,
                "WagwStationRenderer.exportPanel.TabConstraints.tabTitle"),
            exportPanel);        // NOI18N
        jTabbedPane.addTab(org.openide.util.NbBundle.getMessage(
                WagwStationRenderer.class,
                "WagwStationRenderer.visualisationPanel.TabConstraints.tabTitle"),
            visualisationPanel); // NOI18N

        add(jTabbedPane, java.awt.BorderLayout.CENTER);
    } // </editor-fold>//GEN-END:initComponents

    /**
     * DOCUMENT ME!
     */
    @Override
    protected void init() {
        final Runnable r = new Runnable() {

                @Override
                public void run() {
                    try {
                        WagwStationRenderer.this.messstelle = WagwStationRenderer.this.deserializeStation();
                    } catch (Exception ex) {
                        logger.error("could not deserialize WA Messtelle JSON: " + ex.getMessage(), ex);
                        if (WagwStationRenderer.this.messstelle == null) {
                            return;
                        }
                    }

                    final Collection<Parameter> parameters = new ArrayList<Parameter>(
                            messstelle.getProbenparameter());

                    final GridBagConstraints gridBagConstraints = new GridBagConstraints();
                    gridBagConstraints.anchor = GridBagConstraints.NORTHWEST;
                    gridBagConstraints.insets = new java.awt.Insets(2, 5, 2, 2);
                    gridBagConstraints.weighty = 0.0;

                    // Messtelleninfo ---------------------------------------
                    JLabel label;
                    gridBagConstraints.gridy = 0;

                    if (stationType.equals(WaExportAction.WAOW) && (messstelle.getName() != null)
                                && !messstelle.getName().isEmpty()) {
                        gridBagConstraints.gridx = 0;
                        gridBagConstraints.weightx = 0.0;
                        label = new JLabel("Name:");
                        label.setMaximumSize(new Dimension(150, 50));
                        standortdatenPanel.add(label, gridBagConstraints);
                        gridBagConstraints.gridx = 1;
                        gridBagConstraints.weightx = 1.0;
                        label = new JLabel("<html>" + messstelle.getName() + "</html>");
                        label.setMaximumSize(new Dimension(200, 50));
                        standortdatenPanel.add(label, gridBagConstraints);
                    }

                    if ((messstelle.getTyp() != null)
                                && !messstelle.getTyp().isEmpty()) {
                        gridBagConstraints.gridy++;
                        gridBagConstraints.gridx = 0;
                        gridBagConstraints.weightx = 0.0;
                        label = new JLabel("Type:");
                        label.setMaximumSize(new Dimension(150, 50));
                        standortdatenPanel.add(label, gridBagConstraints);
                        gridBagConstraints.gridx = 1;
                        gridBagConstraints.weightx = 1.0;
                        label = new JLabel("<html>" + messstelle.getTyp() + "</html>");
                        label.setMaximumSize(new Dimension(200, 50));
                        standortdatenPanel.add(label, gridBagConstraints);
                    }

                    if ((messstelle.getStatus() != null)
                                && !messstelle.getStatus().isEmpty()) {
                        gridBagConstraints.gridy++;
                        gridBagConstraints.gridx = 0;
                        gridBagConstraints.weightx = 0.0;
                        label = new JLabel("Status:");
                        label.setMaximumSize(new Dimension(150, 50));
                        standortdatenPanel.add(label, gridBagConstraints);
                        gridBagConstraints.gridx = 1;
                        gridBagConstraints.weightx = 1.0;
                        label = new JLabel("<html>" + messstelle.getStatus() + "</html>");
                        label.setMaximumSize(new Dimension(200, 50));
                        standortdatenPanel.add(label, gridBagConstraints);
                    }

                    if ((messstelle.getZustaendigeStelle() != null)
                                && !messstelle.getZustaendigeStelle().isEmpty()) {
                        gridBagConstraints.gridy++;
                        gridBagConstraints.gridx = 0;
                        gridBagConstraints.weightx = 0.0;
                        label = new JLabel("Zuständige Stelle:");
                        label.setMaximumSize(new Dimension(150, 50));
                        standortdatenPanel.add(label, gridBagConstraints);
                        gridBagConstraints.gridx = 1;
                        gridBagConstraints.weightx = 1.0;
                        label = new JLabel("<html>" + messstelle.getZustaendigeStelle() + "</html>");
                        label.setMaximumSize(new Dimension(200, 50));
                        standortdatenPanel.add(label, gridBagConstraints);
                    }

                    if ((messstelle.getBundesland() != null)
                                && !messstelle.getBundesland().isEmpty()) {
                        gridBagConstraints.gridy++;
                        gridBagConstraints.gridx = 0;
                        gridBagConstraints.weightx = 0.0;
                        label = new JLabel("Bundesland:");
                        label.setMaximumSize(new Dimension(150, 50));
                        standortdatenPanel.add(label, gridBagConstraints);
                        gridBagConstraints.gridx = 1;
                        gridBagConstraints.weightx = 1.0;
                        // gridBagConstraints.weighty = 1.0;
                        label = new JLabel("<html>" + messstelle.getBundesland() + "</html>");
                        label.setMaximumSize(new Dimension(200, 50));
                        standortdatenPanel.add(label, gridBagConstraints);
                    }

                    addCustomStationLabels(gridBagConstraints, messstelle);

                    // ParameterPanel ------------------------------------------
                    if ((messstelle.getProbenparameter() != null)
                                && !messstelle.getProbenparameter().isEmpty()) {
                        final ArrayList<String> parameterNames = new ArrayList<String>(messstelle.getProbenparameter()
                                        .size());
                        for (final Parameter probenparameter : messstelle.getProbenparameter()) {
                            parameterNames.add(probenparameter.getParameterName());
                        }
                        parameterPanel.setParameterNames(parameterNames);
                    }

                    // AggregationTable ----------------------------------------
                    messwerteTable.setAggregationValues(
                        messstelle.getAggregationValues().toArray(
                            new AggregationValue[0]));

                    // ParameterSelection (EXPORT) -----------------------------
                    parameterSelectionPanel.setParameters(parameters);
                    final WaExportAction waExportAction = new WaExportAction(
                            parameterSelectionPanel.getSelectedParameters(),
                            Arrays.asList(new Long[] { getCidsBean().getPrimaryKeyValue().longValue() }),
                            Arrays.asList(new String[] { messstelle.getPk() }),
                            stationType);
                    parameterSelectionPanel.setExportAction(waExportAction);
                    // disable SHP export for grundwasser messstelle
                    if (stationType.equals(WaExportAction.WAGW)) {
                        parameterSelectionPanel.setExportFormatEnabled(
                            de.cismet.cids.custom.udm2020di.serveractions.AbstractExportAction.PARAM_EXPORTFORMAT_SHP,
                            false);
                    }
                    if (logger.isDebugEnabled()) {
                        logger.debug("restoring selected tab index: " + SELECTED_TAB);
                    }

                    // Visualisation -------------------------------------------
                    visualisationPanel.setParameters(parameters);
                    final WaVisualisationAction visualisationAction = new WaVisualisationAction(
                            stationType,
                            Arrays.asList(new Messstelle[] { messstelle }),
                            visualisationPanel.getSelectedParameters(),
                            visualisationPanel);
                    visualisationPanel.setVisualisationAction(visualisationAction);

                    // selected TAB --------------------------------------------
                    jTabbedPane.setSelectedIndex(SELECTED_TAB);
                    jTabbedPane.addChangeListener(WeakListeners.create(
                            ChangeListener.class,
                            new ChangeListener() {

                                @Override
                                public void stateChanged(final ChangeEvent evt) {
                                    SELECTED_TAB = jTabbedPane.getSelectedIndex();
                                }
                            },
                            jTabbedPane));
                }
            };

        if (EventQueue.isDispatchThread()) {
            r.run();
        } else {
            EventQueue.invokeLater(r);
        }
    }

    /**
     * DOCUMENT ME!
     *
     * @return  DOCUMENT ME!
     *
     * @throws  IOException  DOCUMENT ME!
     */
    protected Messstelle deserializeStation() throws IOException {
        return OracleImport.JSON_MAPPER.readValue(WagwStationRenderer.this.getCidsBean().getProperty("src_content")
                        .toString(),
                GwMessstelle.class);
    }

    /**
     * DOCUMENT ME!
     *
     * @param  gridBagConstraints  DOCUMENT ME!
     * @param  messstelle          DOCUMENT ME!
     */
    protected void addCustomStationLabels(
            final GridBagConstraints gridBagConstraints,
            final Messstelle messstelle) {
        final GwMessstelle gwMessstelle = (GwMessstelle)messstelle;
        JLabel label;

        if ((gwMessstelle.getGwkName() != null)
                    && !gwMessstelle.getGwkName().isEmpty()) {
            gridBagConstraints.gridy++;
            gridBagConstraints.gridx = 0;
            gridBagConstraints.weightx = 0.0;
            label = new JLabel("GWK Name:");
            label.setMaximumSize(new Dimension(150, 50));
            standortdatenPanel.add(label, gridBagConstraints);
            gridBagConstraints.gridx = 1;
            gridBagConstraints.weightx = 1.0;
            label = new JLabel("<html>" + gwMessstelle.getGwkName() + "</html>");
            label.setMaximumSize(new Dimension(200, 50));
            standortdatenPanel.add(label, gridBagConstraints);
        }

        if ((gwMessstelle.getMesstellenart() != null)
                    && !gwMessstelle.getMesstellenart().isEmpty()) {
            gridBagConstraints.gridy++;
            gridBagConstraints.gridx = 0;
            gridBagConstraints.weightx = 0.0;
            label = new JLabel("Messstellenart:");
            label.setMaximumSize(new Dimension(150, 50));
            standortdatenPanel.add(label, gridBagConstraints);
            gridBagConstraints.gridx = 1;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            label = new JLabel("<html>" + gwMessstelle.getMesstellenart() + "</html>");
            label.setMaximumSize(new Dimension(200, 50));
            standortdatenPanel.add(label, gridBagConstraints);
        }
    }

    /**
     * DOCUMENT ME!
     *
     * @param  args  DOCUMENT ME!
     */
    public static void main(final String[] args) {
        try {
            BasicConfigurator.configure();
            final GwMessstelle messstelle = OracleImport.JSON_MAPPER.readValue(
                    MaxParameterValueSelectionPanel.class.getResourceAsStream(
                        "/de/cismet/cids/custom/udm2020di/testing/WagwStation.json"),
                    GwMessstelle.class);

            final WagwStationRenderer wagwStationRenderer = new WagwStationRenderer();
            wagwStationRenderer.setMessstelle(messstelle);
            wagwStationRenderer.init();

            final JFrame frame = new JFrame("WagwStationRenderer");

            frame.getContentPane().add(wagwStationRenderer);
            frame.getContentPane().setPreferredSize(new Dimension(600, 400));
            frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
            frame.pack();
            frame.setVisible(true);
        } catch (Exception ex) {
            Logger.getLogger(WagwStationRenderer.class).fatal(ex.getMessage(), ex);
            System.exit(1);
        }
    }

    @Override
    public void showExportPanel(final Collection<Parameter> selectedParameters) {
        EventQueue.invokeLater(new Runnable() {

                @Override
                public void run() {
                    parameterSelectionPanel.setSelectedParameters(selectedParameters);
                    jTabbedPane.setSelectedComponent(exportPanel);
                }
            });
    }
}
