/***************************************************
*
* cismet GmbH, Saarbruecken, Germany
*
*              ... and it just works.
*
****************************************************/
package de.cismet.cids.custom.udm2020di.objectrenderer;

import org.apache.log4j.Logger;

import java.awt.Dimension;
import java.awt.EventQueue;
import java.awt.GridBagConstraints;

import java.io.IOException;

import java.util.ArrayList;
import java.util.Arrays;

import javax.swing.JLabel;
import javax.swing.table.DefaultTableModel;

import de.cismet.cids.custom.udm2020di.AbstractCidsBeanRenderer;
import de.cismet.cids.custom.udm2020di.actions.remote.BorisExportAction;
import de.cismet.cids.custom.udm2020di.indeximport.OracleImport;
import de.cismet.cids.custom.udm2020di.types.AggregationValue;
import de.cismet.cids.custom.udm2020di.types.Parameter;
import de.cismet.cids.custom.udm2020di.types.wa.GwMessstelle;
import de.cismet.cids.custom.udm2020di.types.wa.Messstelle;

/**
 * DOCUMENT ME!
 *
 * @author   pd
 * @version  $Revision$, $Date$
 */
public class WagwStationRenderer extends AbstractCidsBeanRenderer {

    //~ Static fields/initializers ---------------------------------------------

    protected static final Logger logger = Logger.getLogger(WagwStationRenderer.class);
    protected static int SELECTED_TAB = 0;

    //~ Instance fields --------------------------------------------------------

    private Messstelle messstelle;

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel exportPanel;
    private javax.swing.Box.Filler filler1;
    private javax.swing.Box.Filler filler2;
    private javax.swing.JPanel infoPanel;
    private javax.swing.JScrollPane jScrollPane;
    private javax.swing.JTabbedPane jTabbedPane;
    private javax.swing.JPanel messwertePanel;
    private javax.swing.JTable messwerteTable;
    private de.cismet.cids.custom.udm2020di.widgets.ParameterPanel parameterPanel;
    private de.cismet.cids.custom.udm2020di.widgets.ParameterSelectionPanel parameterSelectionPanel;
    protected javax.swing.JPanel standortdatenPanel;
    // End of variables declaration//GEN-END:variables

    //~ Constructors -----------------------------------------------------------

    /**
     * Creates new form BorisSiteRenderer.
     */
    public WagwStationRenderer() {
        initComponents();
    }

    //~ Methods ----------------------------------------------------------------

    /**
     * DOCUMENT ME!
     *
     * @return  DOCUMENT ME!
     */
    public Messstelle getMessstelle() {
        return messstelle;
    }

    /**
     * DOCUMENT ME!
     *
     * @param  messstelle  DOCUMENT ME!
     */
    public void setMessstelle(final Messstelle messstelle) {
        this.messstelle = messstelle;
    }
    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The
     * content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        exportPanel = new javax.swing.JPanel();
        parameterSelectionPanel = new de.cismet.cids.custom.udm2020di.widgets.ParameterSelectionPanel();
        filler2 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0),
                new java.awt.Dimension(0, 0),
                new java.awt.Dimension(32767, 32767));
        jTabbedPane = new javax.swing.JTabbedPane();
        infoPanel = new javax.swing.JPanel();
        standortdatenPanel = new javax.swing.JPanel();
        parameterPanel = new de.cismet.cids.custom.udm2020di.widgets.ParameterPanel();
        messwertePanel = new javax.swing.JPanel();
        jScrollPane = new javax.swing.JScrollPane();
        messwerteTable = new javax.swing.JTable();
        filler1 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0),
                new java.awt.Dimension(0, 0),
                new java.awt.Dimension(32767, 32767));

        exportPanel.setLayout(new java.awt.GridBagLayout());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        exportPanel.add(parameterSelectionPanel, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        exportPanel.add(filler2, gridBagConstraints);

        setLayout(new java.awt.BorderLayout());

        jTabbedPane.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jTabbedPane.addChangeListener(new javax.swing.event.ChangeListener() {

                @Override
                public void stateChanged(final javax.swing.event.ChangeEvent evt) {
                    jTabbedPaneStateChanged(evt);
                }
            });

        infoPanel.setLayout(new java.awt.BorderLayout());

        standortdatenPanel.setBorder(javax.swing.BorderFactory.createCompoundBorder(
                javax.swing.BorderFactory.createEmptyBorder(5, 5, 5, 5),
                javax.swing.BorderFactory.createCompoundBorder(
                    javax.swing.BorderFactory.createTitledBorder(
                        org.openide.util.NbBundle.getMessage(
                            WagwStationRenderer.class,
                            "WagwStationRenderer.standortdatenPanel.border.insideBorder.outsideBorder.title")),
                    javax.swing.BorderFactory.createEmptyBorder(5, 5, 5, 5)))); // NOI18N
        standortdatenPanel.setLayout(new java.awt.GridBagLayout());
        infoPanel.add(standortdatenPanel, java.awt.BorderLayout.CENTER);

        parameterPanel.setMinimumSize(new java.awt.Dimension(200, 200));
        infoPanel.add(parameterPanel, java.awt.BorderLayout.EAST);

        jTabbedPane.addTab(org.openide.util.NbBundle.getMessage(
                WagwStationRenderer.class,
                "WagwStationRenderer.infoPanel.TabConstraints.tabTitle"),
            infoPanel); // NOI18N

        messwertePanel.setBorder(javax.swing.BorderFactory.createEmptyBorder(5, 5, 5, 5));
        messwertePanel.setLayout(new java.awt.GridBagLayout());

        messwerteTable.setBorder(javax.swing.BorderFactory.createLineBorder(
                javax.swing.UIManager.getDefaults().getColor("Table.dropLineColor")));
        messwerteTable.setModel(new javax.swing.table.DefaultTableModel(
                new Object[][] {},
                new String[] { "Parametername", "Datum der Probe", "Maximalwert", "Minimalwert" }) {

                Class[] types = new Class[] {
                        java.lang.String.class,
                        java.lang.Object.class,
                        java.lang.Float.class,
                        java.lang.Float.class
                    };
                boolean[] canEdit = new boolean[] { false, false, false, false };

                @Override
                public Class getColumnClass(final int columnIndex) {
                    return types[columnIndex];
                }

                @Override
                public boolean isCellEditable(final int rowIndex, final int columnIndex) {
                    return canEdit[columnIndex];
                }
            });
        messwerteTable.setFillsViewportHeight(true);
        messwerteTable.setPreferredSize(new java.awt.Dimension(300, 500));
        messwerteTable.setRequestFocusEnabled(false);
        jScrollPane.setViewportView(messwerteTable);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        messwertePanel.add(jScrollPane, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        messwertePanel.add(filler1, gridBagConstraints);

        jTabbedPane.addTab(org.openide.util.NbBundle.getMessage(
                WagwStationRenderer.class,
                "WagwStationRenderer.messwertePanel.TabConstraints.tabTitle"),
            messwertePanel); // NOI18N

        add(jTabbedPane, java.awt.BorderLayout.CENTER);
    } // </editor-fold>//GEN-END:initComponents

    /**
     * DOCUMENT ME!
     *
     * @param  evt  DOCUMENT ME!
     */
    private void jTabbedPaneStateChanged(final javax.swing.event.ChangeEvent evt) { //GEN-FIRST:event_jTabbedPaneStateChanged
        SELECTED_TAB = jTabbedPane.getSelectedIndex();
    }                                                                               //GEN-LAST:event_jTabbedPaneStateChanged

    @Override
    protected void init() {
        final Runnable r = new Runnable() {

                @Override
                public void run() {
                    try {
                        WagwStationRenderer.this.messstelle = WagwStationRenderer.this.deserializeStation();
                    } catch (Exception ex) {
                        logger.error("could not deserialize WA Messtelle JSON: " + ex.getMessage(), ex);
                        return;
                    }

                    final GridBagConstraints gridBagConstraints = new GridBagConstraints();
                    gridBagConstraints.anchor = GridBagConstraints.NORTHWEST;
                    gridBagConstraints.insets = new java.awt.Insets(2, 5, 2, 2);
                    gridBagConstraints.weighty = 0.0;

                    // Messtelleninfo ---------------------------------------
                    JLabel label;

                    gridBagConstraints.gridy = 0;
                    gridBagConstraints.gridx = 0;
                    gridBagConstraints.weightx = 0.0;
                    label = new JLabel("Name:");
                    label.setMaximumSize(new Dimension(150, 50));
                    standortdatenPanel.add(label, gridBagConstraints);
                    gridBagConstraints.gridx = 1;
                    gridBagConstraints.weightx = 1.0;
                    label = new JLabel("<html>" + messstelle.getName() + "</html>");
                    label.setMaximumSize(new Dimension(200, 50));
                    standortdatenPanel.add(label, gridBagConstraints);

                    gridBagConstraints.gridy++;
                    gridBagConstraints.gridx = 0;
                    gridBagConstraints.weightx = 0.0;
                    label = new JLabel("Type:");
                    label.setMaximumSize(new Dimension(150, 50));
                    standortdatenPanel.add(label, gridBagConstraints);
                    gridBagConstraints.gridx = 1;
                    gridBagConstraints.weightx = 1.0;
                    label = new JLabel("<html>" + messstelle.getTyp() + "</html>");
                    label.setMaximumSize(new Dimension(200, 50));
                    standortdatenPanel.add(label, gridBagConstraints);

                    gridBagConstraints.gridy++;
                    gridBagConstraints.gridx = 0;
                    gridBagConstraints.weightx = 0.0;
                    label = new JLabel("Status:");
                    label.setMaximumSize(new Dimension(150, 50));
                    standortdatenPanel.add(label, gridBagConstraints);
                    gridBagConstraints.gridx = 1;
                    gridBagConstraints.weightx = 1.0;
                    label = new JLabel("<html>" + messstelle.getStatus() + "</html>");
                    label.setMaximumSize(new Dimension(200, 50));
                    standortdatenPanel.add(label, gridBagConstraints);

                    gridBagConstraints.gridy++;
                    gridBagConstraints.gridx = 0;
                    gridBagConstraints.weightx = 0.0;
                    label = new JLabel("Zuständige Stelle:");
                    label.setMaximumSize(new Dimension(150, 50));
                    standortdatenPanel.add(label, gridBagConstraints);
                    gridBagConstraints.gridx = 1;
                    gridBagConstraints.weightx = 1.0;
                    label = new JLabel("<html>" + messstelle.getZustaendigeStelle() + "</html>");
                    label.setMaximumSize(new Dimension(200, 50));
                    standortdatenPanel.add(label, gridBagConstraints);

                    gridBagConstraints.gridy++;
                    gridBagConstraints.gridx = 0;
                    gridBagConstraints.weightx = 0.0;
                    label = new JLabel("Bundesland:");
                    label.setMaximumSize(new Dimension(150, 50));
                    standortdatenPanel.add(label, gridBagConstraints);
                    gridBagConstraints.gridx = 1;
                    gridBagConstraints.weightx = 1.0;
                    // gridBagConstraints.weighty = 1.0;
                    label = new JLabel("<html>" + messstelle.getBundesland() + "</html>");
                    label.setMaximumSize(new Dimension(200, 50));
                    standortdatenPanel.add(label, gridBagConstraints);

                    addCustomStationLabels(gridBagConstraints, messstelle);

                    // ParameterPanel ------------------------------------------
                    if ((messstelle.getProbenparameter() != null)
                                && !messstelle.getProbenparameter().isEmpty()) {
                        final ArrayList<String> parameterNames = new ArrayList<String>(messstelle.getProbenparameter()
                                        .size());
                        for (final Parameter probenparameter : messstelle.getProbenparameter()) {
                            parameterNames.add(probenparameter.getParameterName());
                        }
                        parameterPanel.setParameterNames(parameterNames);
                    }

                    // AggregationTable ----------------------------------------
                    final DefaultTableModel tableModel = (DefaultTableModel)messwerteTable.getModel();
                    for (final AggregationValue aggregationValue : messstelle.getAggregationValues()) {
                        final Object[] rowData = new Object[] {
                                aggregationValue.getName(),
                                aggregationValue.getMaxDate(),
                                aggregationValue.getMaxValue(),
                                aggregationValue.getMinValue()
                            };
                        tableModel.addRow(rowData);
                    }

                    // ParameterSelection (EXPORT) -----------------------------
                    parameterSelectionPanel.setParameters(new ArrayList<Parameter>(messstelle.getProbenparameter()));
                    final BorisExportAction borisExportAction = new BorisExportAction(Arrays.asList(
                                new String[] { messstelle.getPk() }),
                            parameterSelectionPanel.getSelectedParameters());
                    parameterSelectionPanel.setExportAction(borisExportAction);

                    jTabbedPane.setSelectedIndex(SELECTED_TAB);
                }
            };

        if (EventQueue.isDispatchThread()) {
            r.run();
        } else {
            EventQueue.invokeLater(r);
        }
    }

    /**
     * DOCUMENT ME!
     *
     * @return  DOCUMENT ME!
     *
     * @throws  IOException  DOCUMENT ME!
     */
    protected Messstelle deserializeStation() throws IOException {
        return OracleImport.JSON_MAPPER.readValue(WagwStationRenderer.this.getCidsBean().getProperty("src_content")
                        .toString(),
                GwMessstelle.class);
    }

    /**
     * DOCUMENT ME!
     *
     * @param  gridBagConstraints  DOCUMENT ME!
     * @param  messstelle          DOCUMENT ME!
     */
    protected void addCustomStationLabels(
            final GridBagConstraints gridBagConstraints,
            final Messstelle messstelle) {
        final GwMessstelle gwMessstelle = (GwMessstelle)messstelle;
        JLabel label;

        gridBagConstraints.gridy++;
        gridBagConstraints.gridx = 0;
        gridBagConstraints.weightx = 0.0;
        label = new JLabel("GWK Name:");
        label.setMaximumSize(new Dimension(150, 50));
        standortdatenPanel.add(label, gridBagConstraints);
        gridBagConstraints.gridx = 1;
        gridBagConstraints.weightx = 1.0;
        label = new JLabel("<html>" + gwMessstelle.getGwkName() + "</html>");
        label.setMaximumSize(new Dimension(200, 50));
        standortdatenPanel.add(label, gridBagConstraints);

        gridBagConstraints.gridy++;
        gridBagConstraints.gridx = 0;
        gridBagConstraints.weightx = 0.0;
        label = new JLabel("Messstellenart:");
        label.setMaximumSize(new Dimension(150, 50));
        standortdatenPanel.add(label, gridBagConstraints);
        gridBagConstraints.gridx = 1;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        label = new JLabel("<html>" + gwMessstelle.getMesstellenart() + "</html>");
        label.setMaximumSize(new Dimension(200, 50));
        standortdatenPanel.add(label, gridBagConstraints);
    }
}
