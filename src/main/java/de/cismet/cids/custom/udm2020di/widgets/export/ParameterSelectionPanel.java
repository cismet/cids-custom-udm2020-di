/***************************************************
*
* cismet GmbH, Saarbruecken, Germany
*
*              ... and it just works.
*
****************************************************/
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package de.cismet.cids.custom.udm2020di.widgets.export;

import org.jdesktop.beansbinding.AutoBinding;
import org.jdesktop.beansbinding.BeanProperty;
import org.jdesktop.beansbinding.Binding;
import org.jdesktop.beansbinding.Bindings;
import org.jdesktop.beansbinding.ELProperty;

import org.openide.util.WeakListeners;

import java.awt.EventQueue;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;

import java.util.ArrayList;
import java.util.Collection;
import java.util.SortedSet;
import java.util.TreeSet;

import javax.swing.Action;
import javax.swing.JCheckBox;

import de.cismet.cids.custom.udm2020di.types.Parameter;

/**
 * DOCUMENT ME!
 *
 * @author   pd
 * @version  $Revision$, $Date$
 */
public class ParameterSelectionPanel extends javax.swing.JPanel implements ItemListener {

    //~ Instance fields --------------------------------------------------------

    private org.jdesktop.beansbinding.BindingGroup bindingGroup;

    private final SortedSet<Parameter> parameters = new TreeSet<Parameter>();

    private final ArrayList selectedParameters = new ArrayList();

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel actionPanel;
    private javax.swing.JButton btnExport;
    private javax.swing.JButton btnReset;
    private javax.swing.Box.Filler filler2;
    private javax.swing.JPanel selectionPanel;
    // End of variables declaration//GEN-END:variables

    //~ Constructors -----------------------------------------------------------

    /**
     * Creates new form ParameterSelectionPanel.
     */
    public ParameterSelectionPanel() {
        bindingGroup = new org.jdesktop.beansbinding.BindingGroup();
        initComponents();
    }

    /**
     * Creates a new ParameterSelectionPanel object.
     *
     * @param  parameters  DOCUMENT ME!
     */
    public ParameterSelectionPanel(final Collection<Parameter> parameters) {
        this();
        this.setParameters(parameters);
    }

    //~ Methods ----------------------------------------------------------------

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The
     * content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        selectionPanel = new javax.swing.JPanel();
        actionPanel = new javax.swing.JPanel();
        btnExport = new javax.swing.JButton();
        filler2 = new javax.swing.Box.Filler(new java.awt.Dimension(5, 5),
                new java.awt.Dimension(5, 5),
                new java.awt.Dimension(5, 5));
        btnReset = new javax.swing.JButton();

        setBorder(javax.swing.BorderFactory.createCompoundBorder(
                javax.swing.BorderFactory.createEmptyBorder(5, 5, 5, 5),
                javax.swing.BorderFactory.createCompoundBorder(
                    javax.swing.BorderFactory.createTitledBorder(
                        org.openide.util.NbBundle.getMessage(
                            ParameterSelectionPanel.class,
                            "ParameterSelectionPanel.border.insideBorder.outsideBorder.title")),
                    javax.swing.BorderFactory.createEmptyBorder(5, 5, 5, 5)))); // NOI18N
        setLayout(new java.awt.BorderLayout(5, 5));

        selectionPanel.setBorder(javax.swing.BorderFactory.createMatteBorder(
                0,
                0,
                1,
                0,
                javax.swing.UIManager.getDefaults().getColor("activeCaptionBorder")));
        selectionPanel.setLayout(new java.awt.GridLayout(0, 3, 5, 5));
        add(selectionPanel, java.awt.BorderLayout.CENTER);

        actionPanel.setLayout(new javax.swing.BoxLayout(actionPanel, javax.swing.BoxLayout.LINE_AXIS));

        btnExport.setText(org.openide.util.NbBundle.getMessage(
                ParameterSelectionPanel.class,
                "ParameterSelectionPanel.btnExport.text"));          // NOI18N
        btnExport.setActionCommand(org.openide.util.NbBundle.getMessage(
                ParameterSelectionPanel.class,
                "ParameterSelectionPanel.btnExport.actionCommand")); // NOI18N
        btnExport.setAutoscrolls(true);
        actionPanel.add(btnExport);
        actionPanel.add(filler2);

        btnReset.setText(org.openide.util.NbBundle.getMessage(
                ParameterSelectionPanel.class,
                "ParameterSelectionPanel.btnReset.text"));          // NOI18N
        btnReset.setActionCommand(org.openide.util.NbBundle.getMessage(
                ParameterSelectionPanel.class,
                "ParameterSelectionPanel.btnReset.actionCommand")); // NOI18N
        btnReset.addActionListener(new java.awt.event.ActionListener() {

                @Override
                public void actionPerformed(final java.awt.event.ActionEvent evt) {
                    btnResetActionPerformed(evt);
                }
            });
        actionPanel.add(btnReset);

        add(actionPanel, java.awt.BorderLayout.SOUTH);
    } // </editor-fold>//GEN-END:initComponents

    /**
     * DOCUMENT ME!
     *
     * @param  evt  DOCUMENT ME!
     */
    private void btnResetActionPerformed(final java.awt.event.ActionEvent evt) { //GEN-FIRST:event_btnResetActionPerformed

        if ((this.parameters != null) && !this.parameters.isEmpty()) {
            for (final Parameter parameter : this.parameters) {
                parameter.setSelected(false);
            }
        }
    } //GEN-LAST:event_btnResetActionPerformed

    /**
     * Get the value of parameters.
     *
     * @return  the value of parameters
     */
    public final Collection<Parameter> getParameters() {
        return parameters;
    }

    /**
     * Set the value of parameters.
     *
     * @param  parameters  new value of parameters
     */
    public final void setParameters(final Collection<Parameter> parameters) {
        this.parameters.addAll(parameters);

        final Runnable r = new Runnable() {

                @Override
                public void run() {
                    ParameterSelectionPanel.this.selectionPanel.removeAll();
                    bindingGroup.unbind();
                    if ((parameters != null) && !ParameterSelectionPanel.this.parameters.isEmpty()) {
                        for (final Parameter parameter : ParameterSelectionPanel.this.parameters) {
                            final JCheckBox checkBox = new JCheckBox(parameter.getParameterName());
                            checkBox.addItemListener(WeakListeners.create(
                                    ItemListener.class,
                                    ParameterSelectionPanel.this,
                                    checkBox));
                            ParameterSelectionPanel.this.selectionPanel.add(checkBox);
                            final Binding binding = Bindings.createAutoBinding(
                                    AutoBinding.UpdateStrategy.READ_WRITE,
                                    parameter,
                                    ELProperty.create("${selected}"),
                                    checkBox,
                                    BeanProperty.create("selected"));
                            bindingGroup.addBinding(binding);
                        }

                        bindingGroup.bind();
                    }
                }
            };

        if (EventQueue.isDispatchThread()) {
            r.run();
        } else {
            EventQueue.invokeLater(r);
        }
    }

    /**
     * DOCUMENT ME!
     *
     * @return  DOCUMENT ME!
     */
    public final Collection<Parameter> getSelectedParameters() {
        selectedParameters.clear();
        if ((this.parameters != null) && !this.parameters.isEmpty()) {
            for (final Parameter parameter : this.parameters) {
                if (parameter.isSelected()) {
                    selectedParameters.add(parameter);
                }
            }
        }

        return selectedParameters;
    }

    /**
     * DOCUMENT ME!
     *
     * @param  exportAction  DOCUMENT ME!
     */
    public void setExportAction(final Action exportAction) {
        btnExport.setAction(exportAction);
    }

    @Override
    public void itemStateChanged(final ItemEvent e) {
        if (this.getSelectedParameters().isEmpty()) {
            this.btnExport.getAction().setEnabled(false);
        } else {
            this.btnExport.getAction().setEnabled(true);
        }
    }
}
