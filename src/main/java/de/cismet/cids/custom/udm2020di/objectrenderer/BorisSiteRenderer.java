/***************************************************
*
* cismet GmbH, Saarbruecken, Germany
*
*              ... and it just works.
*
****************************************************/
package de.cismet.cids.custom.udm2020di.objectrenderer;

import org.apache.log4j.Logger;

import java.awt.Dimension;
import java.awt.EventQueue;
import java.awt.GridBagConstraints;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.HashMap;

import javax.swing.JLabel;

import de.cismet.cids.custom.udm2020di.AbstractCidsBeanRenderer;
import de.cismet.cids.custom.udm2020di.actions.remote.BorisExportAction;
import de.cismet.cids.custom.udm2020di.actions.remote.BorisVisualisationAction;
import de.cismet.cids.custom.udm2020di.actions.remote.VisualisationAction;
import de.cismet.cids.custom.udm2020di.indeximport.OracleImport;
import de.cismet.cids.custom.udm2020di.tools.DefaultRendererConfigurationHelper;
import de.cismet.cids.custom.udm2020di.types.AggregationValue;
import de.cismet.cids.custom.udm2020di.types.Parameter;
import de.cismet.cids.custom.udm2020di.types.boris.Probenparameter;
import de.cismet.cids.custom.udm2020di.types.boris.Standort;
import de.cismet.cids.custom.udm2020di.types.boris.Standortparameter;

/**
 * DOCUMENT ME!
 *
 * @author   Pascal Dih√©
 * @version  $Revision$, $Date$
 */
public class BorisSiteRenderer extends AbstractCidsBeanRenderer implements ConfigurableRenderer {

    //~ Static fields/initializers ---------------------------------------------

    protected static final Logger LOGGER = Logger.getLogger(BorisSiteRenderer.class);

    //~ Instance fields --------------------------------------------------------

    private Standort borisStandort;

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel exportPanel;
    private javax.swing.Box.Filler filler2;
    private javax.swing.JPanel infoPanel;
    private javax.swing.JTabbedPane jTabbedPane;
    private de.cismet.cids.custom.udm2020di.widgets.MesswerteTable messwerteTable;
    private de.cismet.cids.custom.udm2020di.widgets.ParameterPanel parameterPanel;
    private javax.swing.JScrollPane parameterScrollPane;
    private de.cismet.cids.custom.udm2020di.widgets.ExportParameterSelectionPanel parameterSelectionPanel;
    private javax.swing.JPanel standortdatenPanel;
    private de.cismet.cids.custom.udm2020di.widgets.boris.BorisVisualisationPanel visualisationPanel;
    // End of variables declaration//GEN-END:variables

    //~ Constructors -----------------------------------------------------------

    /**
     * Creates new form BorisSiteRenderer.
     */
    public BorisSiteRenderer() {
        initComponents();
    }

    //~ Methods ----------------------------------------------------------------

    /**
     * Get the value of borisStandort.
     *
     * @return  the value of borisStandort
     */
    public Standort getBorisStandort() {
        return borisStandort;
    }

    /**
     * Set the value of borisStandort.
     *
     * @param  borisStandort  new value of borisStandort
     */
    public void setBorisStandort(final Standort borisStandort) {
        this.borisStandort = borisStandort;
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The
     * content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jTabbedPane = new javax.swing.JTabbedPane();
        infoPanel = new javax.swing.JPanel();
        standortdatenPanel = new javax.swing.JPanel();
        parameterScrollPane = new javax.swing.JScrollPane();
        parameterPanel = new de.cismet.cids.custom.udm2020di.widgets.ParameterPanel();
        messwerteTable = new de.cismet.cids.custom.udm2020di.widgets.MesswerteTable();
        exportPanel = new javax.swing.JPanel();
        parameterSelectionPanel = new de.cismet.cids.custom.udm2020di.widgets.ExportParameterSelectionPanel();
        filler2 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0),
                new java.awt.Dimension(0, 0),
                new java.awt.Dimension(32767, 32767));
        visualisationPanel = new de.cismet.cids.custom.udm2020di.widgets.boris.BorisVisualisationPanel();

        setLayout(new java.awt.BorderLayout());

        jTabbedPane.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        infoPanel.setLayout(new java.awt.BorderLayout());

        standortdatenPanel.setBorder(javax.swing.BorderFactory.createCompoundBorder(
                javax.swing.BorderFactory.createEmptyBorder(5, 5, 5, 5),
                javax.swing.BorderFactory.createCompoundBorder(
                    javax.swing.BorderFactory.createTitledBorder(
                        org.openide.util.NbBundle.getMessage(
                            BorisSiteRenderer.class,
                            "BorisSiteRenderer.standortdatenPanel.border.insideBorder.outsideBorder.title")),
                    javax.swing.BorderFactory.createEmptyBorder(5, 5, 5, 5)))); // NOI18N
        standortdatenPanel.setLayout(new java.awt.GridBagLayout());
        infoPanel.add(standortdatenPanel, java.awt.BorderLayout.CENTER);

        parameterScrollPane.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        parameterScrollPane.setHorizontalScrollBar(null);
        parameterScrollPane.setMaximumSize(new java.awt.Dimension(200, 32767));
        parameterScrollPane.setMinimumSize(new java.awt.Dimension(200, 300));
        parameterScrollPane.setPreferredSize(new java.awt.Dimension(200, 500));
        parameterScrollPane.setViewportView(parameterPanel);

        infoPanel.add(parameterScrollPane, java.awt.BorderLayout.EAST);

        jTabbedPane.addTab(org.openide.util.NbBundle.getMessage(
                BorisSiteRenderer.class,
                "BorisSiteRenderer.infoPanel.TabConstraints.tabTitle"),
            infoPanel);      // NOI18N
        jTabbedPane.addTab(org.openide.util.NbBundle.getMessage(
                BorisSiteRenderer.class,
                "BorisSiteRenderer.messwerteTable.TabConstraints.tabTitle"),
            messwerteTable); // NOI18N

        exportPanel.setLayout(new java.awt.GridBagLayout());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        exportPanel.add(parameterSelectionPanel, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        exportPanel.add(filler2, gridBagConstraints);

        jTabbedPane.addTab(org.openide.util.NbBundle.getMessage(
                BorisSiteRenderer.class,
                "BorisSiteRenderer.exportPanel.TabConstraints.tabTitle_1"),
            exportPanel);        // NOI18N
        jTabbedPane.addTab(org.openide.util.NbBundle.getMessage(
                BorisSiteRenderer.class,
                "BorisSiteRenderer.visualisationPanel.TabConstraints.tabTitle"),
            visualisationPanel); // NOI18N

        add(jTabbedPane, java.awt.BorderLayout.CENTER);
    } // </editor-fold>//GEN-END:initComponents

    /**
     * DOCUMENT ME!
     */
    @Override
    protected void init() {
        final Runnable r = new Runnable() {

                @Override
                public void run() {
                    try {
                        BorisSiteRenderer.this.borisStandort = OracleImport.JSON_MAPPER.readValue(BorisSiteRenderer.this
                                        .getCidsBean().getProperty("src_content").toString(),
                                Standort.class);
                    } catch (Exception ex) {
                        LOGGER.error("could not deserialize boris Standort JSON: " + ex.getMessage(), ex);
                        return;
                    }

                    final Collection<Parameter> parameters = new ArrayList<Parameter>(
                            borisStandort.getProbenparameter());
                    final HashMap<Long, String> objectIds = new HashMap<Long, String>();
                    objectIds.put(cidsBean.getPrimaryKeyValue().longValue(), cidsBean.getProperty("name").toString());

                    final GridBagConstraints gridBagConstraints = new GridBagConstraints();
                    gridBagConstraints.anchor = GridBagConstraints.NORTHWEST;
                    gridBagConstraints.insets = new java.awt.Insets(2, 5, 2, 2);
                    gridBagConstraints.gridy = 0;

                    // Standortparameter ---------------------------------------
                    JLabel label;
                    int i = 0;
                    for (final Standortparameter standortparameter : borisStandort.getStandortparameter()) {
                        if ((standortparameter.getWert() != null) && !standortparameter.getWert().isEmpty()
                                    && !standortparameter.getWert().equalsIgnoreCase("null")) {
                            gridBagConstraints.gridy = i;
                            gridBagConstraints.gridx = 0;
                            gridBagConstraints.weightx = 0.0;
                            label = new JLabel("<html><p>" + standortparameter.getName() + ": </p></html>");
                            label.setMaximumSize(new Dimension(150, 50));
                            standortdatenPanel.add(label, gridBagConstraints);

                            if (i == (borisStandort.getStandortparameter().size() - 1)) {
                                gridBagConstraints.weighty = 1.0;
                            }
                            gridBagConstraints.gridx = 1;
                            gridBagConstraints.weightx = 1.0;
                            label = new JLabel("<html><p>" + standortparameter.getWert() + "</p></html>");
                            label.setMaximumSize(new Dimension(200, 50));
                            standortdatenPanel.add(label, gridBagConstraints);
                            i++;
                        }
                    }

                    // ParameterPanel ------------------------------------------
                    if ((borisStandort.getProbenparameter() != null)
                                && !borisStandort.getProbenparameter().isEmpty()) {
                        final ArrayList<String> parameterNames = new ArrayList<String>(
                                borisStandort.getProbenparameter().size());
                        for (final Probenparameter probenparameter : borisStandort.getProbenparameter()) {
                            parameterNames.add(probenparameter.getParameterName());
                        }
                        parameterPanel.setParameterNames(parameterNames);
                    }

                    // AggregationTable ----------------------------------------
                    messwerteTable.setAggregationValues(
                        borisStandort.getAggregationValues().toArray(
                            new AggregationValue[0]));

                    // ParameterSelection (EXPORT) -----------------------------
                    parameterSelectionPanel.setParameters(parameters);

                    final BorisExportAction borisExportAction = new BorisExportAction(
                            parameterSelectionPanel.getSelectedParameters(),
                            objectIds,
                            Arrays.asList(new String[] { borisStandort.getPk() }));
                    parameterSelectionPanel.setExportAction(borisExportAction);

                    // Visualisation -------------------------------------------
                    visualisationPanel.setParameters(parameters);
                    final VisualisationAction visualisationAction = new BorisVisualisationAction(
                            Arrays.asList(new Standort[] { borisStandort }),
                            visualisationPanel.getSelectedParameters(),
                            visualisationPanel);
                    visualisationPanel.setVisualisationAction(visualisationAction);

                    // Saved Configuration: Restore Export Parameters ----------
                    DefaultRendererConfigurationHelper.getInstance()
                            .restoreExportSettings(
                                BorisSiteRenderer.this,
                                jTabbedPane,
                                parameterSelectionPanel,
                                exportPanel,
                                LOGGER);

                    // Saved Configuration: Restore selected Tab ---------------
                    DefaultRendererConfigurationHelper.getInstance()
                            .restoreSelectedTab(
                                BorisSiteRenderer.class,
                                jTabbedPane,
                                LOGGER);
                }
            };

        if (EventQueue.isDispatchThread()) {
            r.run();
        } else {
            EventQueue.invokeLater(r);
        }
    }

    @Override
    public void showExportPanel(final Collection<Parameter> selectedParameters) {
        EventQueue.invokeLater(new Runnable() {

                @Override
                public void run() {
                    parameterSelectionPanel.setSelectedParameters(selectedParameters);
                    jTabbedPane.setSelectedComponent(exportPanel);
                }
            });
    }

    @Override
    public String getTitle() {
        String desc = "BORIS Standort";
        if (this.getCidsBean() != null) {
            desc += ": ";
            desc += this.getCidsBean().getProperty("name").toString();
        }
        return desc;
    }
}
