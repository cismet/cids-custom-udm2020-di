/***************************************************
*
* cismet GmbH, Saarbruecken, Germany
*
*              ... and it just works.
*
****************************************************/
package de.cismet.cids.custom.udm2020di.widgets.eprtr;

import org.apache.log4j.Logger;

import java.awt.Desktop;
import java.awt.Dimension;
import java.awt.EventQueue;

import java.net.URI;

import java.text.SimpleDateFormat;

import de.cismet.cids.custom.udm2020di.types.eprtr.Notification;

/**
 * DOCUMENT ME!
 *
 * @author   Pascal Dih√©
 * @version  $Revision$, $Date$
 */
public class NotificationPanel extends javax.swing.JPanel {

    //~ Static fields/initializers ---------------------------------------------

    protected static final String URI_TEMPLATE =
        "http://www5.umweltbundesamt.at/PRTR-web/auswahlNachSchadstoffen.do?event=showDetail&selectedId=";
    protected static final SimpleDateFormat DATE_FORMAT = new SimpleDateFormat("dd.MM.YYYY");
    protected static final Logger LOGGER = Logger.getLogger(NotificationPanel.class);

    //~ Instance fields --------------------------------------------------------

    private Notification notification;

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private org.jdesktop.swingx.JXHyperlink jXHyperlink;
    // End of variables declaration//GEN-END:variables

    //~ Constructors -----------------------------------------------------------

    /**
     * Creates new form AddressPanel.
     */
    public NotificationPanel() {
    }

    //~ Methods ----------------------------------------------------------------

    /**
     * Get the value of address.
     *
     * @return  the value of address
     */
    public Notification getNotification() {
        return notification;
    }

    /**
     * Set the value of address.
     *
     * @param  notification  address new value of address
     */
    public void setNotification(final Notification notification) {
        final Runnable r = new Runnable() {

                @Override
                public void run() {
                    NotificationPanel.this.notification = notification;
                    NotificationPanel.this.initComponents();
                }
            };

        if (EventQueue.isDispatchThread()) {
            r.run();
        } else {
            EventQueue.invokeLater(r);
        }
    }

    @Override
    public Dimension getMaximumSize() {
        return new Dimension(super.getMaximumSize().width, getPreferredSize().height);
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The
     * content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jXHyperlink = new org.jdesktop.swingx.JXHyperlink();

        setBorder(javax.swing.BorderFactory.createCompoundBorder(
                javax.swing.BorderFactory.createTitledBorder(this.getNotification().getName()),
                javax.swing.BorderFactory.createEmptyBorder(5, 5, 5, 5)));
        setLayout(new java.awt.GridBagLayout());

        org.openide.awt.Mnemonics.setLocalizedText(
            jLabel1,
            org.openide.util.NbBundle.getMessage(NotificationPanel.class, "NotificationPanel.jLabel1.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        add(jLabel1, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(
            jLabel2,
            NotificationPanel.DATE_FORMAT.format(this.getNotification().getNotificationStartDate())
                    + " - "
                    + NotificationPanel.DATE_FORMAT.format(this.getNotification().getNotificationEndDate()));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        add(jLabel2, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(
            jLabel3,
            org.openide.util.NbBundle.getMessage(NotificationPanel.class, "NotificationPanel.jLabel3.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 5);
        add(jLabel3, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(
            jLabel4,
            NotificationPanel.DATE_FORMAT.format(this.getNotification().getReportingStartDate())
                    + " - "
                    + NotificationPanel.DATE_FORMAT.format(this.getNotification().getReportingEndDate()));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 0);
        add(jLabel4, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(
            jXHyperlink,
            org.openide.util.NbBundle.getMessage(NotificationPanel.class, "NotificationPanel.jXHyperlink.text")); // NOI18N
        jXHyperlink.addActionListener(new java.awt.event.ActionListener() {

                @Override
                public void actionPerformed(final java.awt.event.ActionEvent evt) {
                    jXHyperlinkActionPerformed(evt);
                }
            });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 0);
        add(jXHyperlink, gridBagConstraints);
    } // </editor-fold>//GEN-END:initComponents

    /**
     * DOCUMENT ME!
     *
     * @param  evt  DOCUMENT ME!
     */
    private void jXHyperlinkActionPerformed(final java.awt.event.ActionEvent evt) {                      //GEN-FIRST:event_jXHyperlinkActionPerformed
        final Desktop desktop = Desktop.isDesktopSupported() ? Desktop.getDesktop() : null;
        if ((desktop != null) && desktop.isSupported(Desktop.Action.BROWSE)) {
            try {
                final URI uri = new URI(URI_TEMPLATE + this.getNotification().getId());
                desktop.browse(uri);
            } catch (Exception e) {
                LOGGER.error("Could not open URI: " + URI_TEMPLATE + this.getNotification().getId(), e); // NOI18N
            }
        } else {
            LOGGER.info("Opening a website is not supported.");                                          // NOI18N
        }
    }                                                                                                    //GEN-LAST:event_jXHyperlinkActionPerformed
}
